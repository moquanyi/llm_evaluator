evaluation:
  # General domain criteria
  general:
    factual_accuracy:
      description: Accuracy of facts and information provided
      weight: 0.3
      aspects:
        - Factual correctness
        - Information accuracy
        - Source reliability
        - Contextual accuracy
    clarity:
      description: Clarity and understandability of the response
      weight: 0.25
      aspects:
        - Clear explanation
        - Appropriate language level
        - Well-structured response
        - Use of examples
    relevance:
      description: Relevance to the question asked
      weight: 0.25
      aspects:
        - Direct answer to question
        - Staying on topic
        - Appropriate scope
        - Context awareness
    completeness:
      description: Thoroughness of the response
      weight: 0.2
      aspects:
        - Complete coverage
        - Sufficient detail
        - Multiple perspectives
        - Supporting evidence

  # Coding domain criteria
  coding:
    correctness:
      description: Functional correctness of the code
      weight: 0.3
      aspects:
        - Syntax correctness
        - Logic accuracy
        - Edge case handling
        - Input validation
    efficiency:
      description: Code performance and resource usage
      weight: 0.2
      aspects:
        - Time complexity
        - Space complexity
        - Algorithm choice
        - Resource optimization
    readability:
      description: Code clarity and maintainability
      weight: 0.25
      aspects:
        - Code structure
        - Variable naming
        - Comments quality
        - Consistent style
    best_practices:
      description: Adherence to coding standards and practices
      weight: 0.25
      aspects:
        - Error handling
        - Security considerations
        - Design patterns
        - Documentation

  # Math domain criteria
  math:
    mathematical_accuracy:
      description: Correctness of mathematical operations and concepts
      weight: 0.35
      aspects:
        - Calculation accuracy
        - Concept application
        - Formula usage
        - Mathematical notation
    proof_quality:
      description: Quality and completeness of mathematical proofs
      weight: 0.25
      aspects:
        - Logical steps
        - Proof structure
        - Assumption clarity
        - Conclusion validity
    problem_solving:
      description: Effectiveness of problem-solving approach
      weight: 0.25
      aspects:
        - Method selection
        - Solution strategy
        - Step clarity
        - Alternative approaches
    mathematical_communication:
      description: Clarity in mathematical explanation
      weight: 0.15
      aspects:
        - Notation clarity
        - Explanation quality
        - Visual aids
        - Technical precision

prompt_templates:
  general:
    use_model_variables: true
    templates:
      - "Explain the concept of {topic} for a general audience"
      - "What are the key implications of {topic} in everyday life?"
      - "Compare {topic_1} and {topic_2}, highlighting their main differences"
    variable_prompts:
      topic: "Generate a single complex technical term or concept (1-3 words only)"
      topic_pairs: "Generate a pair of related concepts (1-2 words each)"
    
  coding:
    use_model_variables: true
    templates:
      - "Implement a {data_structure} with {functionality}"
      - "Write a function to solve the following problem: {problem}"
      - "Optimize this code for {optimization_criteria}: {code}"
      - "Debug this code and explain the issues: {code}"
    variable_prompts:
      data_structure: "Name a single data structure (1-2 words only)"
      functionality: "Name a single operation or method (1 word only)"
      optimization_criteria: "Name a single optimization goal (1-2 words only)"
      problem: "Name a specific algorithmic problem (2-4 words only)"
      code: |
        Generate a short code snippet (max 20 lines) with this format:
        def example():
            # Your code here
    
  math:
    use_model_variables: true
    templates:
      - "Prove that {theorem} is true for all {conditions}"
      - "Solve this {topic} problem step by step: {problem}"
      - "Explain the relationship between {concept_1} and {concept_2} in {topic} using mathematical notation"
      - "Find all solutions to this {equation_type} equation: {equation}"
    variable_prompts:
      theorem: "Name a single mathematical theorem (2-4 words only)"
      conditions: "Name a mathematical condition (1-2 words only)"
      topic: "Name a single mathematical field (1-2 words only)"
      concept_pairs: "Name a pair of related mathematical concepts (1-2 words each)"
      equation_type: "Name a single type of equation (1 word only)"
      equation: "Write a single mathematical equation (max 30 characters)"
      problem: "Write a single mathematical problem statement (max 50 characters)"
      concept_1: "Name a single mathematical concept (1-2 words only)"
      concept_2: "Name a single mathematical concept (1-2 words only)"

default_variables:
  general:
    topic:
      - artificial intelligence
      - climate change
      - quantum computing
      - renewable energy
      - blockchain technology
      - machine learning
    topic_pairs:
      - - traditional education
        - online learning
      - - remote work
        - office work
      - - social media
        - in-person networking
      - - digital communication
        - face-to-face interaction
      - - virtual reality
        - physical reality
      - - e-commerce
        - traditional retail

  coding:
    data_structure:
      - binary tree
      - hash table
      - linked list
      - stack
      - queue
    functionality:
      - insertion
      - deletion
      - search
      - traversal
      - sorting
    optimization_criteria:
      - time complexity
      - space efficiency
      - readability
    problem:
      - find the longest common subsequence
      - implement a cache with LRU policy
      - detect a cycle in a linked list
    code: "def example(n):\n    return n * 2  # Placeholder code"

  math:
    theorem:
      - the Pythagorean theorem
      - the fundamental theorem of calculus
      - the binomial theorem
    conditions:
      - positive integers
      - real numbers
      - prime numbers
    topic:
      - linear algebra
      - calculus
      - probability
    concept_pairs:
      - - derivatives
        - integrals
      - - matrices
        - eigenvalues
      - - vectors
        - cross products
      - - limits
        - continuity
      - - functions
        - transformations
      - - series
        - convergence
      - - gradients
        - optimization
      - - probability
        - statistics
    equation_type:
      - quadratic
      - differential
      - linear
    equation:
      - x^2 + 5x + 6 = 0
      - dy/dx + 2y = x
      - 3x + 4y = 10

evaluation_instructions:
  general:
    - "Evaluate the response's factual accuracy using reliable sources"
    - "Check if the explanation is appropriate for the target audience"
    - "Assess the completeness of the answer against key points"
    
  coding:
    - "Test the code with various inputs including edge cases"
    - "Analyze time and space complexity"
    - "Check for security vulnerabilities and error handling"
    - "Evaluate code style and documentation"
    
  math:
    - "Verify each step of the mathematical proof or solution"
    - "Check for proper use of mathematical notation"
    - "Evaluate the clarity of mathematical reasoning"
    - "Assess the efficiency of the solution method"
